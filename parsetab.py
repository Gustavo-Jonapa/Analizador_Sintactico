
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA DIVIDE DOT EQEQ EQUALS FOR GE GT ID IF LBRACE LE LPAREN LT MINUS NUMBER PLUS PLUSEQ PLUSPLUS PRINT RBRACE RPAREN SEMI STRING SYSTEM TIMES WHILEprogram : statement_liststatement_list : statement_list statement\n| statementstatement : for_statement\n| func_call SEMIfor_statement : FOR LPAREN assignment SEMI condition SEMI increment RPAREN LBRACE statement_list_opt RBRACEstatement_list_opt : statement_list\n| emptyassignment : ID EQUALS expressionexpression : NUMBERexpression : IDcondition : ID LE expression\n| ID GE expression\n| ID LT expression\n| ID GT expression\n| ID EQEQ expressionincrement : ID PLUSPLUSincrement : ID PLUSEQ expressionfunc_call : SYSTEM DOT PRINT LPAREN args RPARENargs : args COMMA arg\n| arg\n| emptyarg : STRING\n| expressionempty :'
    
_lr_action_items = {'FOR':([0,2,3,4,8,9,47,50,52,],[6,6,-3,-4,-2,-5,6,6,-6,]),'SYSTEM':([0,2,3,4,8,9,47,50,52,],[7,7,-3,-4,-2,-5,7,7,-6,]),'$end':([1,2,3,4,8,9,52,],[0,-1,-3,-4,-2,-5,-6,]),'RBRACE':([3,4,8,9,47,49,50,51,52,],[-3,-4,-2,-5,-25,52,-7,-8,-6,]),'SEMI':([5,12,18,20,21,22,34,38,39,40,41,42,],[9,15,28,-11,-9,-10,-19,-12,-13,-14,-15,-16,]),'LPAREN':([6,14,],[10,17,]),'DOT':([7,],[11,]),'ID':([10,15,16,17,28,29,30,31,32,33,35,46,],[13,19,20,20,37,20,20,20,20,20,20,20,]),'PRINT':([11,],[14,]),'EQUALS':([13,],[16,]),'NUMBER':([16,17,29,30,31,32,33,35,46,],[22,22,22,22,22,22,22,22,22,]),'STRING':([17,35,],[26,26,]),'RPAREN':([17,20,22,23,24,25,26,27,36,43,45,48,],[-25,-11,-10,34,-21,-22,-23,-24,44,-20,-17,-18,]),'COMMA':([17,20,22,23,24,25,26,27,43,],[-25,-11,-10,35,-21,-22,-23,-24,-20,]),'LE':([19,],[29,]),'GE':([19,],[30,]),'LT':([19,],[31,]),'GT':([19,],[32,]),'EQEQ':([19,],[33,]),'PLUSPLUS':([37,],[45,]),'PLUSEQ':([37,],[46,]),'LBRACE':([44,],[47,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,47,],[2,50,]),'statement':([0,2,47,50,],[3,8,3,8,]),'for_statement':([0,2,47,50,],[4,4,4,4,]),'func_call':([0,2,47,50,],[5,5,5,5,]),'assignment':([10,],[12,]),'condition':([15,],[18,]),'expression':([16,17,29,30,31,32,33,35,46,],[21,27,38,39,40,41,42,27,48,]),'args':([17,],[23,]),'arg':([17,35,],[24,43,]),'empty':([17,47,],[25,51,]),'increment':([28,],[36,]),'statement_list_opt':([47,],[49,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',17),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',21),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',22),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',30),
  ('statement -> func_call SEMI','statement',2,'p_statement','parser.py',31),
  ('for_statement -> FOR LPAREN assignment SEMI condition SEMI increment RPAREN LBRACE statement_list_opt RBRACE','for_statement',11,'p_for_statement','parser.py',36),
  ('statement_list_opt -> statement_list','statement_list_opt',1,'p_statement_list_opt','parser.py',54),
  ('statement_list_opt -> empty','statement_list_opt',1,'p_statement_list_opt','parser.py',55),
  ('assignment -> ID EQUALS expression','assignment',3,'p_assignment','parser.py',60),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',64),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',68),
  ('condition -> ID LE expression','condition',3,'p_condition','parser.py',73),
  ('condition -> ID GE expression','condition',3,'p_condition','parser.py',74),
  ('condition -> ID LT expression','condition',3,'p_condition','parser.py',75),
  ('condition -> ID GT expression','condition',3,'p_condition','parser.py',76),
  ('condition -> ID EQEQ expression','condition',3,'p_condition','parser.py',77),
  ('increment -> ID PLUSPLUS','increment',2,'p_increment_pp','parser.py',82),
  ('increment -> ID PLUSEQ expression','increment',3,'p_increment_pluseq','parser.py',86),
  ('func_call -> SYSTEM DOT PRINT LPAREN args RPAREN','func_call',6,'p_func_call','parser.py',91),
  ('args -> args COMMA arg','args',3,'p_args','parser.py',95),
  ('args -> arg','args',1,'p_args','parser.py',96),
  ('args -> empty','args',1,'p_args','parser.py',97),
  ('arg -> STRING','arg',1,'p_arg','parser.py',107),
  ('arg -> expression','arg',1,'p_arg','parser.py',108),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',112),
]
